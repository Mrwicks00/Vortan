// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Project metadata (off-chain data)
model ProjectMetadata {
  id        String   @id @default(cuid())
  saleAddress String @unique // Contract address
  
  // Basic Info
  name      String
  symbol    String
  shortDescription String
  longDescription  String
  
  // Social Links
  website   String?
  twitter   String?
  discord   String?
  medium    String?
  
  // Media Assets
  bannerUrl String?
  logoUrl   String?
  
  // Status & Timestamps
  status    String @default("draft") // "draft", "pending", "live", "ended", "cancelled"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // On-chain data reference
  onChainData OnChainData?
  
  // Relations
  participations SaleParticipation[]
  analytics     SaleAnalytics?
  
  @@map("project_metadata")
}

// On-chain data reference
model OnChainData {
  id        String   @id @default(cuid())
  projectId String   @unique
  project   ProjectMetadata @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Contract parameters
  tokenAddress    String
  baseToken       String // "USDC" or "SOMI"
  price           String
  hardCap         String
  softCap         String
  perWalletCap    String
  tierCapT1       String
  tierCapT2       String
  tierCapT3       String
  startTime       String // Store as string since SQLite doesn't support BigInt well
  endTime         String
  tgeTime         String
  vestDuration    String
  tgePercentage   Int
  tokenFee        Int
  feeRecipient    String
  
  @@map("on_chain_data")
}

// User staking data (cached from blockchain)
model UserStaking {
  id           String   @id @default(cuid())
  userAddress  String   @unique
  
  // VORT Staking
  vortTotalStaked    String @default("0")
  vortTotalPoints    String @default("0")
  vortPendingRewards String @default("0")
  
  // SOMI Staking
  somiTotalStaked    String @default("0")
  somiTotalPoints    String @default("0")
  somiPendingRewards String @default("0")
  
  // Combined tier data
  combinedPoints String @default("0")
  tier           Int    @default(1)
  somiWeightBps  Int    @default(8000)
  
  updatedAt      DateTime @updatedAt
  
  // Relations
  participations SaleParticipation[]
  positions      StakingPosition[]
  
  @@map("user_staking")
}

// Staking positions (detailed breakdown)
model StakingPosition {
  id        String   @id @default(cuid())
  userId    String
  user      UserStaking @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Position details
  tokenType String // "VORT" or "SOMI"
  amount    String
  lockEnd   String // Store as string since SQLite doesn't support BigInt well
  multBps   Int
  
  createdAt DateTime @default(now())
  
  @@map("staking_positions")
}

// Sale participation data
model SaleParticipation {
  id           String   @id @default(cuid())
  saleAddress  String
  userAddress  String
  
  // Participation details
  amount       String
  tokensBought String
  tier         Int
  
  // Claim status
  claimed      Boolean  @default(false)
  claimedAt    DateTime?
  
  timestamp    DateTime @default(now())
  
  // Relations
  project      ProjectMetadata @relation(fields: [saleAddress], references: [saleAddress], onDelete: Cascade)
  user         UserStaking @relation(fields: [userAddress], references: [userAddress], onDelete: Cascade)
  
  @@unique([saleAddress, userAddress])
  @@map("sale_participation")
}

// Sale analytics (cached from blockchain + external APIs)
model SaleAnalytics {
  id           String   @id @default(cuid())
  saleAddress  String   @unique
  project      ProjectMetadata @relation(fields: [saleAddress], references: [saleAddress], onDelete: Cascade)
  
  // Social metrics
  twitterMentions Int    @default(0)
  discordMembers  Int    @default(0)
  mediumReads     Int    @default(0)
  sentimentScore  Int    @default(50)
  
  // On-chain metrics
  totalBuyers      Int    @default(0)
  totalRaised      String @default("0")
  averageInvestment String @default("0")
  topInvestors     String // JSON array of addresses
  
  updatedAt        DateTime @updatedAt
  
  @@map("sale_analytics")
}
